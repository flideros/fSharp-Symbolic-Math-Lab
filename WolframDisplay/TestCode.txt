Needs["NETLink`"]

(* Determines the circumcircle of a triangle. Code from Eric Weisstein's PlaneGeometry.m, available on MathWorld. *)
Circumcircle[{{x1_,y1_}, {x2_,y2_}, {x3_,y3_}}] :=
	Module[{a, d, f, g},
		a = Det[{{x1,y1,1}, {x2,y2,1}, {x3,y3,1}}];
		d = -1/2 Det[{{x1^2+y1^2,y1,1}, {x2^2+y2^2,y2,1}, {x3^2+y3^2,y3,1}}];
		f = 1/2 Det[{{x1^2+y1^2,x1,1}, {x2^2+y2^2,x2,1}, {x3^2+y3^2,x3,1}}];
		g = -Det[{{x1^2+y1^2,x1,y1}, {x2^2+y2^2,x2,y2}, {x3^2+y3^2,x3,y3}}];
		Circle[{-d/a,-f/a}, Sqrt[(f^2+d^2)/a^2-g/a]]
	]
	
Test[] :=
	NETBlock[
		Module[{form, pictureBox, vertices, draggingVertex, onMouseMove, onMouseDown, lastX, lastY},
			InstallNET[];

			(* First load some classes from which we need to call static members. No assemblies need to be loaded
			   because the System.Windows.Forms and System.Drawing assemblies are preloaded by .NET/Link.*)
			
			LoadNETAssembly["d:\\MyFolders\\Desktop\\SymbolicMath\\Symbolic Math UI\\Bin\\Debug\\Symbolic_Math.dll"];
			LoadNETAssembly["d:\\MyFolders\\Desktop\\SymbolicMath\\Symbolic Math UI\\Bin\\Debug\\ControlLibrary.dll"];
			LoadNETAssembly["d:\\MyFolders\\Desktop\\SymbolicMath\\Symbolic Math UI\\Bin\\Debug\\WolframDisplay.dll"];			
			LoadNETAssembly["System.Core"];
			LoadNETAssembly["System"];
			LoadNETAssembly["PresentationCore"];
			LoadNETAssembly["PresentationFramework"];			
			LoadNETType["System.Windows.Window"];			
			LoadNETType["ControlLibrary.SharedValue<float>"];

			(* Now create the main form and WPF user control, and set the desired properties.*)
			
			form = NETNew["System.Windows.Window"];
			form@Width = 500;
			form@Height = 500;
			pictureBox = NETNew["Math.Presentation.CircumCircle"]; 		
			
			form@Content = pictureBox;				
			
			(* Define the event callback functions. *)
			
			(* Wire up the event callbacks. *)			
			
			(* Initialize and show window. *)
			vertices = {};			
			form@Show[];			
		]
	]